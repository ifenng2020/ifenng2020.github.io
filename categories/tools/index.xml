<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tools on 平凡之路</title><link>/categories/tools/</link><description>Recent content in tools on 平凡之路</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><lastBuildDate>Thu, 01 Jun 2023 22:31:20 +0800</lastBuildDate><atom:link href="/categories/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Tag</title><link>/posts/git-tag/</link><pubDate>Thu, 01 Jun 2023 22:31:20 +0800</pubDate><guid>/posts/git-tag/</guid><description>什么是标签 Git 标签是 Git 中一个重要的概念，它是一个指向某个 Git 版本的静态指针，用于标记某个特定的提交，类似于一个版本号或者一个里程碑。标签通常用于发布版本、标记重要的里程碑或者备份重要的提交。 Git 标签有两种类型：轻量标签和附注标签。轻量标签就是一个指向某个提交的引用，类似于一个分支，但是</description></item><item><title>Vscode几个快捷键</title><link>/posts/vscode-shortcut/</link><pubDate>Wed, 31 May 2023 14:37:12 +0800</pubDate><guid>/posts/vscode-shortcut/</guid><description>安装Shell command vscode编辑状态下， cmd + shift + p, 输入 shell command 回车，安装code到PATH 命令行调用并打开vscode $ cd ~/go/src/hello $ code . # vscode打开当前目录 # 如果使用的是oh-my-zsh，并且打开 vscode plugin # 也可以实现同样效果 $ vsc 变量重命名 鼠标移到要修改的关键词上，点击 cmd + shift + L 或 F2 可以</description></item><item><title>Hugo Maupassant添加favicon.ico</title><link>/posts/hugo-favicon/</link><pubDate>Mon, 15 May 2023 19:52:19 +0800</pubDate><guid>/posts/hugo-favicon/</guid><description>本篇博文仅在 maupassant 主题下有效 其他主题视情况而定，应该相差不多 生成 favicon 访问 favicon.io 选择 PNG -&amp;gt; ico 或 TEXT -&amp;gt; ico 或 Emoji -&amp;gt; ico 生成完毕点击 Download 添加 favicon 到站点 解压下载文件 将favicon.ico放入 static 文件 $ tree -L 3 ./themes ./themes └── maupassant ├── LICENSE.md ├── archetypes │ └── default.md ├── i18n │ ├── en.toml │ ├── zh-hans.toml │ └── zh-hant.toml ├── layouts │ ├── 404.html │ ├── _default │</description></item><item><title>Vim Makefile无法输入tab问题</title><link>/posts/vim-makefile/</link><pubDate>Fri, 14 Apr 2023 19:04:04 +0800</pubDate><guid>/posts/vim-makefile/</guid><description>问题描述 项目开发过程中，每次编译都要输入一些参数，随着参数的增多，每次编译对开发人员可以说是个“噩梦”， 为了防止每次手动输入编译参数，我们将 Makefile 引入项目。这样可以极大提高开发效率。 之前编写 makefile 都再 IDE 下，编辑器都有特殊设定，编写完，直接 make 一般都不会出太大问题 今天遇到个问题，makefi</description></item><item><title>git reset命令</title><link>/tools/git-reset/</link><pubDate>Wed, 22 Feb 2023 18:38:44 +0800</pubDate><guid>/tools/git-reset/</guid><description>git reset git reset 命令用于回退版本，可以指定退回某一次提交的版本。 git reset 命令语法格式如下： $ git reset [--soft | --mixed | --hard] [HEAD] &amp;ndash;mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。 $ git reset [HEAD] 实例： $ git reset HEAD^ # 回退所有内容到上一个版本 $ git reset HEAD^ hello.php # 回退 hello.php 文件的</description></item><item><title>Git基础命令</title><link>/tools/git-command/</link><pubDate>Wed, 22 Feb 2023 18:26:50 +0800</pubDate><guid>/tools/git-command/</guid><description>配置命令 全局设置提交代码时的用户信息 git config --global user.name &amp;#34;[name]&amp;#34; git config --global user.email &amp;#34;[email address]&amp;#34; 新建代码库 在当前目录新建一个Git代码库 git init 从已存在的仓库克隆 git clone xxx.git [dist folder] 增加文件 添加指定文件到暂存区 git add [file1] [file2] ... 添加当前目录的所有文件到暂存区 git add . 代码提交 提交暂存区到仓库区 git commit -m [message] 分支 列出所有本地分支 git branch 列出所有远程分支 git</description></item><item><title>Git命令备忘</title><link>/tools/git-notes/</link><pubDate>Sat, 18 Feb 2023 23:01:55 +0800</pubDate><guid>/tools/git-notes/</guid><description>git merge 合并时的 --no-ff 的作用： 禁止快进式合并 $ git checkout develop $ git merge --no-ff feature 1、Git 合并两个分支时，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，叫做“快进”（fast-forward）： A---B---C feature / D---E---F master 2、要把 feature 合并到 master 中，执行以下命令 $ git checkout master $ git merge feature ==== &amp;gt; 结果就</description></item><item><title>Gitlab CICD初探</title><link>/posts/gitlab-install/</link><pubDate>Sat, 19 Nov 2022 10:29:00 +0800</pubDate><guid>/posts/gitlab-install/</guid><description>Docker 安装 gitlab-ce，第一次登录未提示修改密码 解决方案如下: 进入容器 进入 Gitlab 控制台 修改/确认密码 保存退出 $ docker exec -it gitlab /bin/bash root@66ef80d52eff:/# gitlab-rails console -e production -------------------------------------------------------------------------------- Ruby: ruby 2.7.5p203 (2021-11-24 revision f69aeb8314) [x86_64-linux] GitLab: 14.6.1 (661d663ab2b) FOSS GitLab Shell: 13.22.1 PostgreSQL: 12.7 -------------------------------------------------------------------------------- Loading production environment (Rails 6.1.4.1) irb(main):001:0&amp;gt; user = User.where(id:1).first =&amp;gt; #&amp;lt;User id:1 @root&amp;gt; irb(main):002:0&amp;gt; user.password=&amp;#39;123456&amp;#39; =&amp;gt; &amp;#34;123456&amp;#34; irb(main):003:0&amp;gt; user.password_confirmation=&amp;#39;123456&amp;#39; =&amp;gt; &amp;#34;123456&amp;#34; irb(main):004:0&amp;gt; user.save! =&amp;gt; true irb(main):005:0&amp;gt; exit root@66ef80d52eff:/# exit exit CI-持续集成 确定 runner 机器上有相应的构建工具（git、no</description></item><item><title>NPM更换国内源</title><link>/posts/npm-source/</link><pubDate>Sat, 05 Nov 2022 08:49:46 +0800</pubDate><guid>/posts/npm-source/</guid><description>更换源很简单，重度 Node.js 使用者，无法忍受下载插件速度慢，更换源步骤如下 临时使用 $ npm --registry https://registry.npm.taobao.org install express 永久使用 $ npm config set registry https://registry.npm.taobao.org 验证 $ npm config get registry 安装 yarn $ npm install -y yarn</description></item></channel></rss>