<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 平凡之路</title><link>/categories/golang/</link><description>Recent content in golang on 平凡之路</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><lastBuildDate>Fri, 02 Jun 2023 20:36:29 +0800</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Gin参数校验</title><link>/posts/gin-validator/</link><pubDate>Fri, 02 Jun 2023 20:36:29 +0800</pubDate><guid>/posts/gin-validator/</guid><description>Gin 使用了结构体标签（struct tags）的方式来定义参数校验规则。以下是一个使用 Gin 进行参数校验的示例： 首先，定义一个结构体类型来表示请求参数： type CreateUserRequest struct { Name string `json:&amp;#34;name&amp;#34; binding:&amp;#34;required&amp;#34;` Email string `json:&amp;#34;email&amp;#34; binding:&amp;#34;required,email&amp;#34;` Password string `json:&amp;#34;password&amp;#34; binding:&amp;#34;required,min=8&amp;#34;` } 在上述示例中，使用了 binding 结构体标签来指定参数校验规则。binding:&amp;quot;required&amp;qu</description></item><item><title>Golang一致性哈希实现</title><link>/posts/golang-consistent-hash/</link><pubDate>Mon, 29 May 2023 15:01:12 +0800</pubDate><guid>/posts/golang-consistent-hash/</guid><description>概念 一致性哈希是指将数据分散到多个节点上进行存储的方法。在一致性哈希中，数据通常用数字编码，并使用哈希函数将它们映射到一个固定的哈希环上。在这种情况下，哈希环的大小通常是 2 的某个次方。选择 2 的 32 次方作为哈希环的大小是因为这是一个较大的数字，能够在哈希环上映射到许多不同的点，从而提</description></item><item><title>Golang testify学习</title><link>/posts/golang-testify/</link><pubDate>Wed, 17 May 2023 15:21:51 +0800</pubDate><guid>/posts/golang-testify/</guid><description>摘要：Go 语言的测试框架 testify 是一个功能丰富且易于使用的工具集，旨在帮助开发者编写高质量的测试代码。 本文将深入介绍 testify 的主要组件，包括断言库 assert、测试工具集 suite 和模拟对象库 mock，并讨论如何充分利用 testify 提升测试覆盖率和可维护性。 引言 在软件开发中，测试是确保代码质量和稳定性的重要环</description></item><item><title>Go Test代码覆盖率</title><link>/posts/go-test-cover/</link><pubDate>Mon, 24 Apr 2023 12:17:51 +0800</pubDate><guid>/posts/go-test-cover/</guid><description>go test -v -cover 执行单元测试并计算覆盖率 go test 工具可以用来测试 单元测试的代码覆盖率，示例如下： $ go test -v -cover === RUN TestSum --- PASS: TestSum (0.00s) === RUN TestAbs --- PASS: TestAbs (0.00s) PASS coverage: 85.7% of statements ok gotest 0.005s 从覆盖率来看（coverage: 85.7% of statements），测试用例没有覆盖全部的代码，只有 85.7% ，可以通过如下命令将 cover 的详细信息保存到 cover.out 中。 $ go</description></item><item><title>Golang Context的使用方式</title><link>/posts/golang-context/</link><pubDate>Sun, 26 Feb 2023 16:32:28 +0800</pubDate><guid>/posts/golang-context/</guid><description>context 是 go 中控制协程的一种比较方便的方式。 Select + Chan 我们都知道一个 goroutine 启动后，我们是无法控制他的，大部分情况是等待它自己结束，那么如果这个 goroutine 是一个不会自己结束的后台 goroutine 呢？比如监控等，会一直运行的。 这种情况下比较笨的办法是全局变量，其他地方通过修改这个变量完成结束通知，然后后台 goroutine 不停的检查这</description></item><item><title>Golang 测试基础</title><link>/posts/golang-testing/</link><pubDate>Wed, 15 Feb 2023 15:47:26 +0800</pubDate><guid>/posts/golang-testing/</guid><description>如今的软件复杂性，给开发带来了大量的精力，有两个方式可以有效缓解这个问题：软件发布之前的同行评审（业务、产品、技术）、以及软件有效的测试（自动化测试） Go 基于轻量级的测试方式，基于 go 工具链以及相关的函数进行，同时测试还涉及压力测试和文档示例 1. 测试基础 1.1. *_test 文件 go test扫描以*_te</description></item><item><title>Golang格式化输出备忘</title><link>/posts/golang-format-output/</link><pubDate>Mon, 13 Feb 2023 08:34:14 +0800</pubDate><guid>/posts/golang-format-output/</guid><description>Go 中格式化输出 General %v 以默认的方式打印变量的值 %T 打印变量的类型 Integer %+d 带符号的整型，fmt.Printf(“%+d”, 255)输出+255 %d 不带符号的整形，注意和 %+d 的区别。 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带 0x 的十六进制 %U 打印 Unicode 字符 %#U 打印带字符的 Unicode %b 打印整型</description></item></channel></rss>