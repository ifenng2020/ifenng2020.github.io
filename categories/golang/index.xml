<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 平凡之路</title><link>https://zaifeng.tech/categories/golang/</link><description>Recent content in golang on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 26 Feb 2023 16:32:28 +0800</lastBuildDate><atom:link href="https://zaifeng.tech/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Context的使用方式</title><link>https://zaifeng.tech/posts/golang-context/</link><pubDate>Sun, 26 Feb 2023 16:32:28 +0800</pubDate><guid>https://zaifeng.tech/posts/golang-context/</guid><description>context 是 go 中控制协程的一种比较方便的方式。 Select + Chan 我们都知道一个 goroutine 启动后，我们是无法控制他的，大部分情况是等待它自己结束，那么如果这个 goroutine 是一个不会自己结束的后台 goroutine 呢？比如监控等，会一直运行的。 这种情况下比较笨的办法是全局变量，其他地方通过修改这个变量完成结束通知，然后后台 goroutine 不停的检查这</description></item><item><title>Golang 测试基础</title><link>https://zaifeng.tech/posts/golang-testing/</link><pubDate>Wed, 15 Feb 2023 15:47:26 +0800</pubDate><guid>https://zaifeng.tech/posts/golang-testing/</guid><description>如今的软件复杂性，给开发带来了大量的精力，有两个方式可以有效缓解这个问题：软件发布之前的同行评审（业务、产品、技术）、以及软件有效的测试（自动化测试） Go基于轻量级的测试方式，基于go工具链以及相关的函数进行，同时测试还涉及压力测试和文档示例 1. 测试基础 1.1. *_test文件 go test</description></item><item><title>Golang格式化输出备忘</title><link>https://zaifeng.tech/posts/golang-format-output/</link><pubDate>Mon, 13 Feb 2023 08:34:14 +0800</pubDate><guid>https://zaifeng.tech/posts/golang-format-output/</guid><description>Go中格式化输出 General %v 以默认的方式打印变量的值 %T 打印变量的类型 Integer %+d 带符号的整型，fmt.Printf(“%+d”, 255)输出+255 %d 不带符号的整形，注意和 %+d的区别。 %o 不带零的八进制 %#o 带零的八进制 %x 小写的十六进制 %X 大写的十六进制 %#x 带0x的十六进制 %U 打印Unicode字符 %#U 打印</description></item></channel></rss>