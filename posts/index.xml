<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 平凡之路</title><link>https://zaifeng.tech/posts/</link><description>Recent content in Posts on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 14 Nov 2022 15:37:56 +0800</lastBuildDate><atom:link href="https://zaifeng.tech/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式-外观模式</title><link>https://zaifeng.tech/posts/design-pattern-facade/</link><pubDate>Mon, 14 Nov 2022 15:37:56 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-facade/</guid><description>概念 外观模式又叫门面模式，是一种常用的封装模式 给一系列具有关联性的子系统的集合提供对外访问的一组接口，调用者不用明确内部具体的业务逻辑，只需要调用这组接口达到目的即可。也就是要求子系统外部与内部不能直接进行通讯，必须通过一个统一的对象进行，而这个统一的对象就是门面。门面模式通过只</description></item><item><title>设计模式-简单工厂模式</title><link>https://zaifeng.tech/posts/design-pattern-simple-factory/</link><pubDate>Mon, 14 Nov 2022 15:37:39 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-simple-factory/</guid><description>概念 Golang中没有构造函数，一般使用NewXXX 或 New() 函数来初始化相关类， 在这个 simplefactory 包中只有API 接口和 NewAPI 函数为包外可见，封装了实现细节。 使用场景 工厂类负责创建的对象比较少，客户只知道传入了工厂类的参数，对于始何创建对象（逻辑）不关心。 优点 工厂类含有必要的判断逻辑，可以决定在什么</description></item><item><title>设计模式-策略模式</title><link>https://zaifeng.tech/posts/design-pattern-strategy/</link><pubDate>Mon, 14 Nov 2022 14:07:44 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-strategy/</guid><description>概念 策略模式是一种行为设计模式， 它将一组行为转换为对象， 并使其在原始上下文对象内部能够相互替换。 策略模式主要的作用还是解耦策略的定义、创建和使用，控制代码的复杂度，让每个部分都不至于过于复杂、代码量过多。除此之外，对于复杂代码来说，策略模式还能让其满足开闭原则，添加新策略的时候，</description></item><item><title>TCP 粘包/拆包的原因及解决方法</title><link>https://zaifeng.tech/posts/tcp-exception/</link><pubDate>Mon, 14 Nov 2022 10:49:44 +0800</pubDate><guid>https://zaifeng.tech/posts/tcp-exception/</guid><description>TCP粘包、拆包属于网络底层问题，在数据链路层、网络层、传输层都有可能出现。日常的网络应用开发大多数在传输层出现，而UDP是由消息保护边界的，不会发生粘包、拆包问题，只发生在TCP协议中。假设客户端向服务端发送了两个连续的数据包Packet1、Packet2； 在这个过程中可能会出</description></item><item><title>软件发行版本</title><link>https://zaifeng.tech/posts/soft-release/</link><pubDate>Fri, 11 Nov 2022 23:24:54 +0800</pubDate><guid>https://zaifeng.tech/posts/soft-release/</guid><description>软件版本周期 α、β、λ 常用来表示软件测试过程中的三个阶段。 α 是第一阶段，一般只供内部测试使用； β 是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用； λ 是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处</description></item><item><title>Redis Hyperloglog使用</title><link>https://zaifeng.tech/posts/redis-hyperloglog/</link><pubDate>Tue, 08 Nov 2022 10:33:59 +0800</pubDate><guid>https://zaifeng.tech/posts/redis-hyperloglog/</guid><description>基本命令 PFADD 1 &amp;gt; pfadd key v1 v2 ... vn PFCOUNT 1 &amp;gt; pfcount key PFMERGE 1 &amp;gt; pfmerge newkey key1 key2 ... keyn 实例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;gt; pfadd user:uv 12345 23456 (integer) 1 &amp;gt; pfcount user:uv (integer) 2 &amp;gt; pfadd user:uv 12345 (integer) 0 &amp;gt; pfadd user:uv 4 5 6 (integer) 1 &amp;gt; pfcount user:uv (integer) 5 &amp;gt; keys * 1) &amp;#34;user:uv&amp;#34; &amp;gt; pfadd user:uv:202211 1 2 3 4 5 6 (integer) 1 &amp;gt; PFMERGE uv user:uv user:uv:202211 OK &amp;gt; pfcount uv (integer) 8 总结 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近2^64 个不同</description></item><item><title>Node.js更换国内源</title><link>https://zaifeng.tech/posts/npmsource/</link><pubDate>Sat, 05 Nov 2022 08:49:46 +0800</pubDate><guid>https://zaifeng.tech/posts/npmsource/</guid><description>更换源很简单，重度Node.js使用者，无法忍受下载插件速度慢，更换源步骤如下 临时使用 1 $ npm --registry https://registry.npm.taobao.org install express 永久使用 1 $ npm config set registry https://registry.npm.taobao.org 验证 1 $ npm config get registry 安装yarn 1 $ npm install -y yarn</description></item></channel></rss>