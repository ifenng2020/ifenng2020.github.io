<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>testing on 平凡之路</title><link>/tags/testing/</link><description>Recent content in testing on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 17 May 2023 15:21:51 +0800</lastBuildDate><atom:link href="/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang testify学习</title><link>/posts/golang-testify/</link><pubDate>Wed, 17 May 2023 15:21:51 +0800</pubDate><guid>/posts/golang-testify/</guid><description>摘要：Go 语言的测试框架 testify 是一个功能丰富且易于使用的工具集，旨在帮助开发者编写高质量的测试代码。 本文将深入介绍 testify 的主要组件，包括断言库 assert、测试工具集 suite 和模拟对象库 mock，并讨论如何充分利用 testify 提升测试覆盖率和可维护性。 引言 在软件开发中，测试是确保代码质量和稳定性的重要环</description></item><item><title>Go Test代码覆盖率</title><link>/posts/go-test-cover/</link><pubDate>Mon, 24 Apr 2023 12:17:51 +0800</pubDate><guid>/posts/go-test-cover/</guid><description>go test -v -cover 执行单元测试并计算覆盖率 go test 工具可以用来测试 单元测试的代码覆盖率，示例如下： 1 2 3 4 5 6 7 8 $ go test -v -cover === RUN TestSum --- PASS: TestSum (0.00s) === RUN TestAbs --- PASS: TestAbs (0.00s) PASS coverage: 85.7% of statements ok gotest 0.005s 从覆盖率来看（coverage: 85.7% of statements），测试用例没有覆盖全部的代码，只有 85.7% ，可以通过如下命令将 cover 的详细信息</description></item><item><title>Golang 测试基础</title><link>/posts/golang-testing/</link><pubDate>Wed, 15 Feb 2023 15:47:26 +0800</pubDate><guid>/posts/golang-testing/</guid><description>如今的软件复杂性，给开发带来了大量的精力，有两个方式可以有效缓解这个问题：软件发布之前的同行评审（业务、产品、技术）、以及软件有效的测试（自动化测试） Go 基于轻量级的测试方式，基于 go 工具链以及相关的函数进行，同时测试还涉及压力测试和文档示例 1. 测试基础 1.1. *_test 文件 go test扫描以*_te</description></item></channel></rss>