<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on 平凡之路</title><link>/tags/go/</link><description>Recent content in go on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 12 Jun 2023 13:06:45 +0800</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 为什么nil != nil</title><link>/posts/golang-nil/</link><pubDate>Mon, 12 Jun 2023 13:06:45 +0800</pubDate><guid>/posts/golang-nil/</guid><description>摘自go官网 Frequently Asked Questions Why is my nil error value not equal to nil? Under the covers, interfaces are implemented as two elements, a type T and a value V. V is a concrete value such as an int, struct or pointer, never an interface itself, and has type T. For instance, if we store the int value 3 in an interface, the resulting interface value has, schematically, (T=int, V=3). The value V is also known as the interface&amp;rsquo;s dynamic value, since a given interface variable might hold different values V (and corresponding types T) during the execution of the program. An interface value is nil only if the V and T are both unset, (T=nil, V is not set), In particular, a nil interface will always hold a nil type. If we store a</description></item></channel></rss>