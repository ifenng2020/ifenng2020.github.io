<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>channel on 平凡之路</title><link>/tags/channel/</link><description>Recent content in channel on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 16 Jun 2023 22:44:28 +0800</lastBuildDate><atom:link href="/tags/channel/index.xml" rel="self" type="application/rss+xml"/><item><title>Go如何控制并发请求数</title><link>/posts/go-concurrency/</link><pubDate>Fri, 16 Jun 2023 22:44:28 +0800</pubDate><guid>/posts/go-concurrency/</guid><description>仅仅限制并发数 var limit = make(chan int, 300) func main() { // ………… for _, w := range work { go func() { limit &amp;lt;- 1 w() &amp;lt;-limit }() } // ………… } 控制单位时间内并发数 可以通过使用 time.Tick 和 sync.WaitGroup 来控制每秒请求并发数。 具体实现方法如下： const maxQPS = 100 // 每秒最大请求数 func main() { qpsInterval := time.Second / time.Duration(maxQPS) // 每个请求的时间间隔 var wg sync.WaitGroup ticker := time.Tick(qpsInterval) for i := 0; i &amp;lt; 1000; i++ { wg.Add(1) &amp;lt;-ticker // 等待下一个请求时间</description></item></channel></rss>