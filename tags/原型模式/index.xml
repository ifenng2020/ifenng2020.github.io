<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>原型模式 on 平凡之路</title><link>https://zaifeng.tech/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 原型模式 on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 19 Nov 2022 16:17:22 +0800</lastBuildDate><atom:link href="https://zaifeng.tech/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Pattern Prototype</title><link>https://zaifeng.tech/posts/design-pattern-prototype/</link><pubDate>Sat, 19 Nov 2022 16:17:22 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-prototype/</guid><description>代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package prototype import ( &amp;#34;encoding/json&amp;#34; &amp;#34;time&amp;#34; ) // Keyword 搜索关键字 type Keyword struct { word string visit int UpdatedAt *time.Time } // Clone 这里使用序列化与反序列化的方式深拷贝 func (k *Keyword) Clone() *Keyword { var newKeyword Keyword b, _ := json.Marshal(k) json.Unmarshal(b, &amp;amp;newKeyword) return &amp;amp;newKeyword } // Keywords 关键字 map type Keywords map[string]*Keyword // Clone 复制一个新的 keywords // updatedWords: 需要更新的关键词列表，</description></item></channel></rss>