<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on 平凡之路</title><link>/tags/rust/</link><description>Recent content in rust on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 21 Mar 2024 10:59:41 +0800</lastBuildDate><atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Trait Study</title><link>/posts/rust-trait/</link><pubDate>Thu, 21 Mar 2024 10:59:41 +0800</pubDate><guid>/posts/rust-trait/</guid><description>trait BitSet { fn clear(&amp;amp;mut self, index: usize); fn is_set(&amp;amp;self, index: usize) -&amp;gt; bool; fn set(&amp;amp;mut self, index: usize); fn toggle(&amp;amp;mut self, index: usize) { if self.is_set(index) { self.clear(index); } else { self.set(index); } } } impl BitSet for u64 { fn clear(&amp;amp;mut self, index: usize) { *self &amp;amp;= !(1 &amp;lt;&amp;lt; index); } fn is_set(&amp;amp;self, index: usize) -&amp;gt; bool { (*self &amp;gt;&amp;gt; index) &amp;amp; 1 == 1 } fn set(&amp;amp;mut self, index: usize) { *self |= 1 &amp;lt;&amp;lt; index; } fn toggle(&amp;amp;mut self, index: usize) { *self ^= 1 &amp;lt;&amp;lt; index } }</description></item><item><title>Rust --cfg 用法</title><link>/posts/rust-cfg-usage/</link><pubDate>Tue, 23 Jan 2024 16:40:56 +0800</pubDate><guid>/posts/rust-cfg-usage/</guid><description>在Rust中，--cfg（configuration）标志用于根据条件编译代码。你可以通过在代码中使用条件编译属性来设置这些条件。下面是一些使用 --cfg 的基本步骤： 在 Cargo.toml 中设置条件： 在你的 Cargo.toml 文件中，你可以定义一些配置项，这些配置项可以在代码中使用。例如： [package] name = &amp;#34;your_project&amp;#34; version = &amp;#34;0.1.0&amp;#34; [features] # 定义一个名为 &amp;#34;example_feature&amp;#34; 的</description></item><item><title>Rust 中的 String 为什么不能通过下标去访问</title><link>/posts/rust-string-indexing/</link><pubDate>Mon, 22 Jan 2024 10:30:11 +0800</pubDate><guid>/posts/rust-string-indexing/</guid><description>在 Rust 中，String 类型是一个动态可变的 UTF-8 字符串，与传统的字符数组不同。UTF-8 字符串的特点是每个字符可能占用不同数量的字节，因此通过下标去访问字符串的字符并不是一个常量时间的操作，因为需要遍历字符串来找到相应的位置。 Rust 中的 String 类型实际上是一个包装了 Vec&amp;lt;u8&amp;gt;（字</description></item><item><title>Rust Benchmark初探</title><link>/posts/rust-benchmark/</link><pubDate>Fri, 19 Jan 2024 11:37:12 +0800</pubDate><guid>/posts/rust-benchmark/</guid><description>在Rust中，您可以使用标准库中的 test 模块来编写和运行基准测试。基准测试是用于测量代码性能的测试类型，通常用于比较不同实现的性能差异。在Rust中使用基准测试的一般步骤： 添加依赖： 确保您的项目的 Cargo.toml 文件中包含 test 和 bencher 依赖。在 [dev-dependencies] 部分添加如下行： $ cargo add bencher@0.1.6 --dev 查看Cargo.toml [dev-dependencies] bencher = &amp;#34;0.1.6&amp;#34; 创</description></item></channel></rss>