<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 平凡之路</title><link>/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 27 Aug 2023 12:01:37 +0800</lastBuildDate><atom:link href="/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式与算法的区别</title><link>/posts/diff-pattern-algorithm/</link><pubDate>Sun, 27 Aug 2023 12:01:37 +0800</pubDate><guid>/posts/diff-pattern-algorithm/</guid><description>设计模式（Design Patterns）和算法（Algorithms）是软件开发领域中两个不同的概念，它们有着不同的作用和应用。 设计模式： 设计模式是在软件设计过程中针对常见问题的解决方案的一种抽象描述。它们并不是具体的实现代码，而是关于如何组织和设计代码以解决特定类型问题的指导原</description></item><item><title>设计模式-单例模式</title><link>/posts/design-pattern-singleton/</link><pubDate>Sun, 04 Jun 2023 16:29:03 +0800</pubDate><guid>/posts/design-pattern-singleton/</guid><description>概念 ​ 单例模式是一种常见的设计模式，用于确保一个类只有一个实例，并提供一个全局访问点。 根据初始化的时机不同，单例模式又分为 懒汉式 和 饿汉式下面通过多个实例 懒汉式在第一次使用时创建实例对象， 饿汉式在程序启动时就创建实例对象。 饿汉式 type singleton struct {} var instance *singleton func init() { instance = new(singleton) } func GetInstance() *singleton { return instance } 饿汉式 是 线程</description></item></channel></rss>