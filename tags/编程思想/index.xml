<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程思想 on 平凡之路</title><link>/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</link><description>Recent content in 编程思想 on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 04 Jun 2023 16:29:03 +0800</lastBuildDate><atom:link href="/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式-单例模式</title><link>/posts/design-pattern-singleton/</link><pubDate>Sun, 04 Jun 2023 16:29:03 +0800</pubDate><guid>/posts/design-pattern-singleton/</guid><description>概念 ​ 单例模式 是一种常见的设计模式，用于确保一个类只有一个实例，并提供一个全局访问点。 根据初始化的时机不同，单例模式又分为 懒汉式 和 饿汉式下面通过多个实例 懒汉式在第一次使用时创建实例对象， 饿汉式在程序启动时就创建实例对象。 饿汉式 type singleton struct {} var instance *singleton func init() { instance = new(singleton) } func GetInstance() *singleton { return instance } 饿汉式 是 线程</description></item><item><title>建造者模式</title><link>/posts/design-pattern-builder/</link><pubDate>Mon, 21 Nov 2022 20:31:56 +0800</pubDate><guid>/posts/design-pattern-builder/</guid><description>概念 建造者模式一种创建型设计模式，它将一个复杂对象的构建过程与其表示分离开来，从而使得同样的构建过程可以创建不同的表示形式。 模式优点： 将对象的构建过程与具体表示分离：建造者模式通过将对象的构建过程与其表示分离开来，使得可以使用相同的构建过程来创建不同的表示形式。这种分离可以提高代</description></item><item><title>简单工厂模式</title><link>/posts/design-pattern-simple-factory/</link><pubDate>Mon, 14 Nov 2022 15:37:39 +0800</pubDate><guid>/posts/design-pattern-simple-factory/</guid><description>概念 Golang 中没有构造函数，一般使用 NewXXX 或 New() 函数来初始化相关类， 在这个 simple 包中只有 API 接口和 NewGreeting 函数为包外可见，封装了实现细节。 使用场景 工厂类负责创建的对象比较少，客户只知道传入了工厂类的参数，对于始何创建对象（逻辑）不关心。 优点 工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实</description></item></channel></rss>