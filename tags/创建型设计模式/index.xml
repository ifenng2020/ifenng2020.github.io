<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>创建型设计模式 on 平凡之路</title><link>https://zaifeng.tech/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 创建型设计模式 on 平凡之路</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 21 Nov 2022 14:22:44 +0800</lastBuildDate><atom:link href="https://zaifeng.tech/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>工厂方法模式</title><link>https://zaifeng.tech/posts/design-pattern-factory/</link><pubDate>Mon, 21 Nov 2022 14:22:44 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-factory/</guid><description>实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package factory // Interviewer 面试接口 实现回答问题 type interviewer interface { AskQuestions() string } // Developer 开发者 type Developer struct{} // AskQuestions 开发者面试需要回答的问题 func (developer *Developer) AskQuestions() string { return &amp;#34;问关于开发的问题!&amp;#34; } // CommunityExecutive CommunityExecutive(行政人员) type CommunityExecutive</description></item><item><title>设计模式-原型模式</title><link>https://zaifeng.tech/posts/design-pattern-prototype/</link><pubDate>Sat, 19 Nov 2022 16:17:22 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-prototype/</guid><description>代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package prototype import ( &amp;#34;encoding/json&amp;#34; &amp;#34;time&amp;#34; ) // Keyword 搜索关键字 type Keyword struct { word string visit int UpdatedAt *time.Time } // Clone 这里使用序列化与反序列化的方式深拷贝 func (k *Keyword) Clone() *Keyword { var newKeyword Keyword b, _ := json.Marshal(k) json.Unmarshal(b, &amp;amp;newKeyword) return &amp;amp;newKeyword } // Keywords 关键字 map type Keywords map[string]*Keyword // Clone 复制一个新的 keywords // updatedWords: 需要更新的关键词列表，</description></item><item><title>设计模式-抽象工厂模式</title><link>https://zaifeng.tech/posts/design-pattern-abstractfactory/</link><pubDate>Tue, 15 Nov 2022 11:26:38 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-abstractfactory/</guid><description/></item><item><title>设计模式-简单工厂模式</title><link>https://zaifeng.tech/posts/design-pattern-simple-factory/</link><pubDate>Mon, 14 Nov 2022 15:37:39 +0800</pubDate><guid>https://zaifeng.tech/posts/design-pattern-simple-factory/</guid><description>概念 Golang中没有构造函数，一般使用NewXXX 或 New() 函数来初始化相关类， 在这个 simplefactory 包中只有API 接口和 NewAPI 函数为包外可见，封装了实现细节。 使用场景 工厂类负责创建的对象比较少，客户只知道传入了工厂类的参数，对于始何创建对象（逻辑）不关心。 优点 工厂类含有必要的判断逻辑，可以决定在什么</description></item></channel></rss>