<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on 平凡之路</title><link>/tools/</link><description>Recent content in Tools on 平凡之路</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><lastBuildDate>Wed, 22 Feb 2023 18:42:41 +0800</lastBuildDate><atom:link href="/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Mac Brew安装</title><link>/tools/mac-brew-install/</link><pubDate>Wed, 22 Feb 2023 18:42:41 +0800</pubDate><guid>/tools/mac-brew-install/</guid><description>一条命令搞定 安装的时候会提示选择更新源（阿里，中科大，清华等），再也不用担心安装/更新速度慢了 /bin/zsh -c &amp;#34;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&amp;#34; 注意：已安装会卸载原有的，重新安装</description></item><item><title>git reset命令</title><link>/tools/git-reset/</link><pubDate>Wed, 22 Feb 2023 18:38:44 +0800</pubDate><guid>/tools/git-reset/</guid><description>git reset git reset 命令用于回退版本，可以指定退回某一次提交的版本。 git reset 命令语法格式如下： $ git reset [--soft | --mixed | --hard] [HEAD] &amp;ndash;mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。 $ git reset [HEAD] 实例： $ git reset HEAD^ # 回退所有内容到上一个版本 $ git reset HEAD^ hello.php # 回退 hello.php 文件的</description></item><item><title>Git基础命令</title><link>/tools/git-command/</link><pubDate>Wed, 22 Feb 2023 18:26:50 +0800</pubDate><guid>/tools/git-command/</guid><description>配置命令 全局设置提交代码时的用户信息 git config --global user.name &amp;#34;[name]&amp;#34; git config --global user.email &amp;#34;[email address]&amp;#34; 新建代码库 在当前目录新建一个Git代码库 git init 从已存在的仓库克隆 git clone xxx.git [dist folder] 增加文件 添加指定文件到暂存区 git add [file1] [file2] ... 添加当前目录的所有文件到暂存区 git add . 代码提交 提交暂存区到仓库区 git commit -m [message] 分支 列出所有本地分支 git branch 列出所有远程分支 git</description></item><item><title>Git命令备忘</title><link>/tools/git-notes/</link><pubDate>Sat, 18 Feb 2023 23:01:55 +0800</pubDate><guid>/tools/git-notes/</guid><description>git merge 合并时的 --no-ff 的作用： 禁止快进式合并 $ git checkout develop $ git merge --no-ff feature 1、Git 合并两个分支时，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，叫做“快进”（fast-forward）： A---B---C feature / D---E---F master 2、要把 feature 合并到 master 中，执行以下命令 $ git checkout master $ git merge feature ==== &amp;gt; 结果就</description></item></channel></rss>